// <auto-generated />
using System;
using Events.Infrastructure.DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Events.Infrastructure.Migrations
{
    [DbContext(typeof(EventsDbContext))]
    partial class EventsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventEventRequirement", b =>
                {
                    b.Property<Guid>("EventRequirementsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventRequirementsId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventEventRequirement");
                });

            modelBuilder.Entity("EventEventTag", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventEventTag");
                });

            modelBuilder.Entity("EventRequirementEventRole", b =>
                {
                    b.Property<Guid>("EventRequirementsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventRolesId")
                        .HasColumnType("uuid");

                    b.HasKey("EventRequirementsId", "EventRolesId");

                    b.HasIndex("EventRolesId");

                    b.ToTable("EventRequirementEventRole");
                });

            modelBuilder.Entity("EventRequirementEventRoleTemplate", b =>
                {
                    b.Property<Guid>("EventRequirementsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventRoleTemplatesId")
                        .HasColumnType("uuid");

                    b.HasKey("EventRequirementsId", "EventRoleTemplatesId");

                    b.HasIndex("EventRoleTemplatesId");

                    b.ToTable("EventRequirementEventRoleTemplate");
                });

            modelBuilder.Entity("EventRequirementEventTemplate", b =>
                {
                    b.Property<Guid>("EventRequirementsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventTemplatesId")
                        .HasColumnType("uuid");

                    b.HasKey("EventRequirementsId", "EventTemplatesId");

                    b.HasIndex("EventTemplatesId");

                    b.ToTable("EventRequirementEventTemplate");
                });

            modelBuilder.Entity("EventRoleTemplateEventTemplate", b =>
                {
                    b.Property<Guid>("EventRoleTemplatesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("EventRoleTemplatesId", "EventTemplateId");

                    b.HasIndex("EventTemplateId");

                    b.ToTable("EventRoleTemplateEventTemplate");
                });

            modelBuilder.Entity("EventTagEventTemplate", b =>
                {
                    b.Property<Guid>("EventTemplatesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventTemplatesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventTagEventTemplate");
                });

            modelBuilder.Entity("Events.Domain.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Events.Domain.Entities.ActivityParticipation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<float>("PaymentRatio")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityParticipations");
                });

            modelBuilder.Entity("Events.Domain.Entities.ActivityTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("EventTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventTemplateId");

                    b.ToTable("ActivityTemplates");
                });

            modelBuilder.Entity("Events.Domain.Entities.DiscordEventChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscordChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DiscordEventChannels");
                });

            modelBuilder.Entity("Events.Domain.Entities.DiscordEventChannelTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscordChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DiscordEventChannelTemplate");
                });

            modelBuilder.Entity("Events.Domain.Entities.DynamicTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("DynamicTransactions");
                });

            modelBuilder.Entity("Events.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("DiscordEventId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("DiscordTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("ExpectedDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime>("LaunchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiscordTemplateId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EventId");

                    b.ToTable("EventActivities");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventManagemer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Logbook")
                        .HasColumnType("text");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventManagemers");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventParticipation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventRoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManagerNotes")
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParticipantNotes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("EventRoleId");

                    b.ToTable("EventParticipations");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsGameHandleVerificationRequired")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RequiredLicenseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RequiredRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("EventRequirements");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxSlots")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRoles");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventRoleTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RequiredCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EventRoleTemplates");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EventTags");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DiscordTemplateId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("ExpectedDuration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiscordTemplateId");

                    b.ToTable("EventTemplates");
                });

            modelBuilder.Entity("Events.Domain.Entities.StaticTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("ParticipationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParticipationId");

                    b.ToTable("StaticTransactions");
                });

            modelBuilder.Entity("EventEventRequirement", b =>
                {
                    b.HasOne("Events.Domain.Entities.EventRequirement", null)
                        .WithMany()
                        .HasForeignKey("EventRequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventEventTag", b =>
                {
                    b.HasOne("Events.Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.EventTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventRequirementEventRole", b =>
                {
                    b.HasOne("Events.Domain.Entities.EventRequirement", null)
                        .WithMany()
                        .HasForeignKey("EventRequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.EventRole", null)
                        .WithMany()
                        .HasForeignKey("EventRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventRequirementEventRoleTemplate", b =>
                {
                    b.HasOne("Events.Domain.Entities.EventRequirement", null)
                        .WithMany()
                        .HasForeignKey("EventRequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.EventRoleTemplate", null)
                        .WithMany()
                        .HasForeignKey("EventRoleTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventRequirementEventTemplate", b =>
                {
                    b.HasOne("Events.Domain.Entities.EventRequirement", null)
                        .WithMany()
                        .HasForeignKey("EventRequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.EventTemplate", null)
                        .WithMany()
                        .HasForeignKey("EventTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventRoleTemplateEventTemplate", b =>
                {
                    b.HasOne("Events.Domain.Entities.EventRoleTemplate", null)
                        .WithMany()
                        .HasForeignKey("EventRoleTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.EventTemplate", null)
                        .WithMany()
                        .HasForeignKey("EventTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventTagEventTemplate", b =>
                {
                    b.HasOne("Events.Domain.Entities.EventTemplate", null)
                        .WithMany()
                        .HasForeignKey("EventTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.EventTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Domain.Entities.ActivityParticipation", b =>
                {
                    b.HasOne("Events.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Events.Domain.Entities.ActivityTemplate", b =>
                {
                    b.HasOne("Events.Domain.Entities.EventTemplate", "EventTemplate")
                        .WithMany()
                        .HasForeignKey("EventTemplateId");

                    b.Navigation("EventTemplate");
                });

            modelBuilder.Entity("Events.Domain.Entities.DiscordEventChannel", b =>
                {
                    b.HasOne("Events.Domain.Entities.DiscordEventChannel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Events.Domain.Entities.DiscordEventChannelTemplate", b =>
                {
                    b.HasOne("Events.Domain.Entities.DiscordEventChannelTemplate", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Events.Domain.Entities.DynamicTransaction", b =>
                {
                    b.HasOne("Events.Domain.Entities.ActivityParticipation", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.ActivityParticipation", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Events.Domain.Entities.Event", b =>
                {
                    b.HasOne("Events.Domain.Entities.DiscordEventChannel", "DiscordTemplate")
                        .WithMany()
                        .HasForeignKey("DiscordTemplateId");

                    b.Navigation("DiscordTemplate");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventActivity", b =>
                {
                    b.HasOne("Events.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventManagemer", b =>
                {
                    b.HasOne("Events.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventParticipation", b =>
                {
                    b.HasOne("Events.Domain.Entities.DiscordEventChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("Events.Domain.Entities.EventRole", "EventRole")
                        .WithMany()
                        .HasForeignKey("EventRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("EventRole");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventRole", b =>
                {
                    b.HasOne("Events.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Events.Domain.Entities.EventTemplate", b =>
                {
                    b.HasOne("Events.Domain.Entities.DiscordEventChannelTemplate", "DiscordTemplate")
                        .WithMany()
                        .HasForeignKey("DiscordTemplateId");

                    b.Navigation("DiscordTemplate");
                });

            modelBuilder.Entity("Events.Domain.Entities.StaticTransaction", b =>
                {
                    b.HasOne("Events.Domain.Entities.ActivityParticipation", "Participation")
                        .WithMany()
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participation");
                });
#pragma warning restore 612, 618
        }
    }
}
